// @ts-check
/*******************************************************************************************
 * -----------------------------------------------------------------------------------------
 * Contexto
 * ---------
 * Est√°s construyendo una peque√±a aplicaci√≥n interna para un laboratorio de qu√≠mica.
 * El ¬´API¬ª del laboratorio tarda¬†‚âà¬†1¬†s en responder y devuelve un lote de muestras
 * que deben analizarse.  Para practicar asincron√≠a **NO** haremos peticiones reales:
 * simularemos la latencia con `setTimeout` y Promesas.
 *
 * -----------------------------------------------------------------------------------------
 * 1.  MOCK¬†API
 *     üëá¬†No modifiques esta funci√≥n. Simula la llamada HTTP a un ‚Äúservidor‚Äù.
 *******************************************************************************************/
function obtenerMuestrasDelServidor () {
    /** @type {{ id:number, nombre:string, ph:number, concentracion:number, temper:number }[]} */
    const MOCK_MUESTRAS = [
      { id: 1, nombre: "Soluci√≥n Ac√©tica",  ph: 3.5,  concentracion: 0.1, temper: 21 },
      { id: 2, nombre: "Tamp√≥n Fosfato",   ph: 7.2,  concentracion: 0.05, temper: 22 },
      { id: 3, nombre: "Soluci√≥n Am√≥nica", ph: 11.1, concentracion: 0.2, temper: 19 },
      { id: 4, nombre: "Agua Desionizada", ph: 7.0,  concentracion: 0.0,  temper: 20 }
    ];
  
    return new Promise(resolve => {
      // Simula 1¬†s de latencia de red/servidor
      setTimeout(() => resolve(MOCK_MUESTRAS), 1000);
    });
  }
  
  /*******************************************************************************************
   * 2.  TU MISI√ìN
   * -----------------------------------------------------------------------------------------
   * A) Crea la funci√≥n **`obtenerMuestras()`**  (async)
   *    - Debe invocar a `obtenerMuestrasDelServidor()` usando `await`.
   *    - Debe devolver el array de muestras.
   *
   * B) Crea la funci√≥n **`filtrarPorPH(muestras, rango)`**
   *    - `muestras` es el array recibido.
   *    - `rango` es un objeto `{ min:number, max:number }`.
   *    - Devuelve s√≥lo las muestras cuyo pH est√© en el rango (incluyendo l√≠mites).
   *
   * C) Crea la funci√≥n **`calcularPromedioConcentracion(muestras)`**
   *    - Calcula y devuelve el promedio de la propiedad `concentracion`.
   *    - Usa `Array.prototype.reduce`.
   *
   * D) Crea la funci√≥n **`procesarEnsayo()`** (async)
   *    - 1¬†. Llama a `obtenerMuestras()` y espera la respuesta.
   *    - 2¬†. Filtra las muestras con pH entre **6** y **8**.
   *    - 3¬†. Muestra en consola:
   *          "üî¨ Muestras neutras/ligeramente √°cidas/alcalinas: <N>"
   *    - 4¬†. Calcula el promedio de concentraci√≥n de TODO el lote recibido
   *          y muestra en consola:
   *          "üìä Promedio de concentraci√≥n: <valor>%"
   *
   * -----------------------------------------------------------------------------------------
   * 3.  SUGERENCIAS
   *    ‚Ä¢  Usa `try/catch` dentro de funciones async para capturar errores.
   *    ‚Ä¢  Emplea **`async` / `await`** en lugar de `.then()` para mayor legibilidad.
   *    ‚Ä¢  El ejercicio simula un √∫nico ‚Äúendpoint‚Äù; en un escenario real tendr√≠as
   *       varios `fetch` hacia distintas URLs.
   *
   * 4.  DEMO
   *    Al final del archivo invoca `procesarEnsayo()` para ver el flujo completo.
   *******************************************************************************************/
  
  // TODO: A) Implementa aqu√≠ `obtenerMuestras`
  
  // TODO: B) Implementa aqu√≠ `filtrarPorPH`
  
  // TODO: C) Implementa aqu√≠ `calcularPromedioConcentracion`
  
  // TODO: D) Implementa aqu√≠ `procesarEnsayo`
  
  // -----------------------------------------------------------------------------
  // L√çNEA DE EJECUCI√ìN: cuando termines las funciones, descomenta la siguiente:
  // procesarEnsayo();
  