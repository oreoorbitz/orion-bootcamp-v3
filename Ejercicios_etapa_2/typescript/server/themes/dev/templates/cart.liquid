<!-- templates/45_cart.liquid -->
<h1 class="text-2xl font-bold mb-6">Tu carrito</h1>

{% if cart.item_count > 0 %}
  <form id="cart-form">
    <table class="w-full border-collapse mb-6">
      <thead>
        <tr class="border-b">
          <th class="text-left py-2 w-20">Imagen</th>
          <th class="text-left py-2">Producto</th>
          <th class="text-left py-2">Cantidad</th>
          <th class="text-left py-2">Precio</th>
          <th class="text-left py-2">Subtotal</th>
        </tr>
      </thead>
      <tbody>
        {% for item in cart.items %}
          <tr class="border-b align-top">
            <td class="py-2 pr-2">
              {% assign alt = item.title | strip_html %}
              {{ item.image | image_url: width: 'small' | image_tag: class: 'w-16 h-16 object-cover rounded', alt: alt, width: item.image.width, height: item.image.height }}
            </td>
            <td class="py-2">
              <a href="/products/{{ item.handle }}" class="text-blue-600 hover:underline">
                {{ item.title }}
              </a>
                <ul class="mt-1 text-sm text-gray-600 space-y-0.5">
                  {% for property in item.properties %}
                    <li><span class="font-medium">{{ property.first }}:</span> {{ property.last }}</li>
                  {% endfor %}
                </ul>
            </td>
            <td class="py-2">
              <input
                type="number"
                name="updates[{{ item.id }}]"
                value="{{ item.quantity }}"
                min="0"
                class="border rounded p-1 w-16"
                aria-label="Cantidad para {{ item.title }}"
              >
            </td>
            <td class="py-2">{{ item.price | money }}</td>
            <td class="py-2">{{ item.price | times: item.quantity | money }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <div class="mb-6 p-4 border rounded bg-gray-50">
      <h2 class="font-semibold mb-3">Opciones del carrito</h2>
      <label class="block mb-3">
        <span class="block text-sm text-gray-700 mb-1">Nota de regalo</span>
        <textarea
          name="attributes[gift_note]"
          rows="3"
          class="w-full border rounded p-2"
          placeholder="Escribe un mensaje para quien recibirá el pedido"
        >{{ cart.attributes.gift_note }}</textarea>
      </label>

      <label class="inline-flex items-center space-x-2">
        <input type="checkbox" id="rush_delivery" class="border rounded"
          {% if cart.attributes.rush_delivery == 'true' %}checked{% endif %}>
        <span class="text-sm text-gray-700">Entrega urgente</span>
      </label>
      <p class="mt-1 text-xs text-gray-500">
        (La entrega urgente es una preferencia; no ajusta el precio en este ejercicio)
      </p>
    </div>

    <div class="flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between">
      <div class="flex gap-3">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded shadow">
          Actualizar carrito
        </button>
        <button id="clear-cart-btn" type="button" class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow">
          Vaciar carrito
        </button>
      </div>

      <div class="text-right text-lg font-semibold">
        <div>Total artículos: {{ cart.item_count }}</div>
        <div>Total: {{ cart.total_price | money }}</div>
      </div>
    </div>
  </form>

  <script>
  (function () {
    const form = document.getElementById('cart-form');
    const clearBtn = document.getElementById('clear-cart-btn');
    const rushCheckbox = document.getElementById('rush_delivery');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const updates = {};
      for (const [key, value] of formData.entries()) {
        if (key.startsWith('updates[')) {
          const m = key.match(/updates\[(\d+)\]/);
          if (m) updates[m[1]] = parseInt(value, 10);
        }
      }
      const attributes = {};
      for (const [key, value] of formData.entries()) {
        if (key.startsWith('attributes[')) {
          const m = key.match(/attributes\[(.+)\]/);
          if (m) attributes[m[1]] = String(value ?? '');
        }
      }
      attributes['rush_delivery'] = rushCheckbox && rushCheckbox.checked ? 'true' : 'false';

      const response = await fetch('/cart/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updates, attributes })
      });
      if (response.ok) location.reload();
      else alert('Hubo un problema al actualizar el carrito');
    });

    clearBtn.addEventListener('click', async () => {
      const response = await fetch('/cart/clear', { method: 'POST' });
      if (response.ok) window.location.href = '/cart';
      else alert('Hubo un problema al vaciar el carrito');
    });
  })();
  </script>
{% else %}
  <p>Tu carrito está vacío.</p>
{% endif %}
