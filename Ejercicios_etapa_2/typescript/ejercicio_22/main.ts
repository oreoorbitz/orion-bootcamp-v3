/**
 * M√ìDULO 22: INYECTAR JAVASCRIPT TRANSPILADO EN HTML
 *
 * üß† Concepto clave:
 * Aunque Deno permite correr TypeScript directamente, los navegadores no lo soportan.
 * Por eso, necesitamos transpilar nuestro c√≥digo `.ts` a `.js` y luego insertarlo en la p√°gina.
 *
 * `Deno.emit()` nos da el JavaScript como texto (en memoria), as√≠ que no necesitamos crear archivos `.js`.
 * Podemos tomar ese resultado y **modificar el HTML directamente, sin usar librer√≠as**.
 *
 * üéØ Objetivo:
 * Crear una √∫nica funci√≥n que:
 * - Transpile un archivo `.ts` a `.js` en memoria
 * - Inserte ese JS como script inline dentro de un archivo HTML
 * - **Sobrescriba el HTML original con el resultado**
 *
 * ‚úÖ Instrucciones:
 *
 * 1. En la ra√≠z del proyecto (junto a `Ejercicios_etapa_2/`), crea un archivo `injector.ts`
 * 2. Define y exporta la siguiente funci√≥n:
 *
 * ```ts
 * export async function injector(
 *   tsPath: string,
 *   htmlPath: string
 * ): Promise<void>
 * ```
 *
 * Esta funci√≥n debe:
 * - Leer el contenido del archivo HTML en `htmlPath`
 * - Usar `Deno.emit()` para transpilar `tsPath` a JavaScript (sin escribir archivos)
 * - Insertar el resultado como `<script>...</script>` justo antes de la etiqueta `</body>`
 * - Sobrescribir el archivo `htmlPath` con el nuevo contenido
 *
 * ‚öôÔ∏è Importante:
 * - Deno **no tiene un modelo DOM**, as√≠ que debes modificar el HTML como string
 * - No uses ninguna librer√≠a externa ‚Äî hazlo con `.replace()` o similares
 *
 *
 * ‚úÖ Ejemplo de uso en `main.ts`:
 *
 * ```ts
 * import { injector } from "../injector.ts";
 *
 * await injector("frontend.ts", "index.html");
 * ```
 *
 * ‚úÖ Resultado esperado:
 * El archivo `index.html` original debe ser reemplazado con una versi√≥n que contenga:
 *
 * ```html
 * <html>
 * <body>
 *   ...contenido HTML...
 *   <script>
 *     // tu JS inline aqu√≠
 *     console.log("Este JS se ejecuta en el navegador");
 *   </script>
 * </body>
 * </html>
 * ```
 *
 * üß™ Consejo:
 * Esta t√©cnica de inyecci√≥n es com√∫n en herramientas modernas como Vite y Astro.
 * Inyectar c√≥digo inline te permite experimentar r√°pidamente sin montar servidores o rutas.
 *
 * ‚ö†Ô∏è Nota:
 * Este m√≥dulo es la base para implementar **hot reload** en el M√≥dulo 23.
 * Necesitamos que el JS ya est√© insertado para que el navegador pueda abrir una conexi√≥n WebSocket.
 */
