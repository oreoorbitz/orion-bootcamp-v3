/**
 * M√ìDULO 22: INYECTAR JAVASCRIPT TRANSPILADO EN HTML
 *
 * üß† Concepto clave:
 * Aunque Deno permite correr TypeScript directamente, los navegadores no lo soportan.
 * Por eso, necesitamos transpilar nuestro c√≥digo `.ts` a `.js` y luego insertarlo en la p√°gina.
 *
 * `Deno.emit()` nos da el JavaScript como texto (en memoria), as√≠ que no necesitamos crear archivos `.js`.
 * Podemos tomar ese resultado y **modificar el HTML directamente, sin usar librer√≠as**.
 *
 * üéØ Objetivo:
 * Crear una √∫nica funci√≥n que:
 * - Transpile un archivo `.ts` a `.js` en memoria
 * - Inserte ese JS como script inline dentro de un archivo HTML
 * - **Sobrescriba el HTML original con el resultado**
 *
 * ‚úÖ Instrucciones:
 *
 * 1. En la ra√≠z del proyecto (junto a `Ejercicios_etapa_2/typescript`), crea un archivo `injector.ts`
 * 2. Define y exporta la siguiente funci√≥n:
 *
 * ```ts
 * export async function injector(
 *   tsPath: string,
 *   htmlPath: string
 * ): Promise<void>
 * ```
 *
 * Esta funci√≥n debe:
 * - Leer el contenido del archivo HTML en `htmlPath`
 * - Usar `Deno.emit()` para transpilar `tsPath` a JavaScript (sin escribir archivos)
 * - Insertar el resultado como `<script>...</script>` justo antes de la etiqueta `</body>`
 * - Sobrescribir el archivo `htmlPath` con el nuevo contenido
 *
 * ‚öôÔ∏è Importante:
 * - Deno **no tiene un modelo DOM**, as√≠ que debes modificar el HTML como string
 * - No uses ninguna librer√≠a externa ‚Äî hazlo con `.replace()` o similares
 *
 *
 * ‚úÖ Ejemplo de uso en `main.ts`:
 *
 * ```ts
 * import { injector } from "../injector.ts";
 *
 * await injector("frontend.ts", "index.html");
 * ```
 *
 * ‚úÖ Resultado esperado:
 * El archivo `index.html` original debe ser reemplazado con una versi√≥n que contenga:
 *
 * ```html
 * <html>
 * <body>
 *   ...contenido HTML...
 *   <script>
 *     // tu JS inline aqu√≠
 *     console.log("Este JS se ejecuta en el navegador");
 *   </script>
 * </body>
 * </html>
 * ```
 *
 * üß™ Consejo:
 * Esta t√©cnica de inyecci√≥n es com√∫n en herramientas modernas como Vite y Astro.
 * Inyectar c√≥digo inline te permite experimentar r√°pidamente sin montar servidores o rutas.
 *
 * üß© Integraci√≥n con tu flujo anterior:
 * Puedes elegir c√≥mo probar esta funcionalidad:
 * - Opci√≥n A: Crear un HTML sencillo (como `index.html`) a mano para pruebas r√°pidas
 * - Opci√≥n B: Usar el flujo que ya construiste en m√≥dulos anteriores (generaci√≥n con Liquid, layouts, etc.)
 *
 * Ambas opciones son v√°lidas **por ahora**.
 *
 * ‚ö†Ô∏è Pero atenci√≥n:
 * En el **M√≥dulo 23**, necesitar√°s que esto funcione con tu flujo de plantillas anterior.
 * El objetivo es agregar hot reload a tu sistema completo, as√≠ que aseg√∫rate de tenerlo funcionando pronto.
 */
import { iniciarServidor } from "../slightlyLate.ts";
import { liquidEngine } from "../plantilla_motor/motorDePlantillas.ts";
import { htmlParser } from "../plantilla_motor/parserDehtml.ts";
import { renderDOM } from "../plantilla_motor/renderizador.ts";

const plantillaPath = "./content_for_index.liquid"; //
const outputPath = "./dist/index.html";

// üîπ Contexto declarado directamente en `main.ts`
const contexto = {
    settings: { titulo: "Mi tienda" },
    producto: { titulo: "Camisa", descripcion: "De algod√≥n" }
};

// **Observar cambios en `content_for_index.liquid`**
async function observarCambios() {
    console.log(" Observando cambios en `content_for_index.liquid`...");

    for await (const evento of Deno.watchFs("./")) {
        if (evento.paths.some((path) => path.endsWith("content_for_index.liquid"))) {
            console.log("\nüîÑ Cambio detectado en `content_for_index.liquid`, regenerando HTML...");
            await recargarYGenerarHTML();
        }
    }
}

// **Generar el HTML**
async function recargarYGenerarHTML() {
    try {
        console.clear();

        // üîπ Leer `template.liquid`
        const entradaLiquid = await Deno.readTextFile(plantillaPath);

        // üîπ Procesar la plantilla con el contexto declarado en `main.ts`
        const plantillaRenderizada = liquidEngine(entradaLiquid, contexto);
        const arbolDOM = htmlParser(await plantillaRenderizada);
        const htmlFinal = renderDOM(arbolDOM);

        // üîπ Guardar el HTML en `dist/index.html`
        await Deno.writeTextFile(outputPath, htmlFinal);
        console.log("\n‚úÖ Archivo `dist/index.html` generado exitosamente.");
    } catch (error) {
        console.error("\n‚ùå Error al generar el archivo HTML:", error);
    }
}

// **Ejecutamos el watcher**
await recargarYGenerarHTML(); // Render inicial
observarCambios(); // Monitorea cambios en `template.liquid`

// üî• Iniciar el servidor una sola vez
iniciarServidor(3000);
