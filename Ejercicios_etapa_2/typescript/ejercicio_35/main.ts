/**
 * MÃ“DULO 35: Comandos avanzados de CLI para gestiÃ³n de temas

 * ðŸ§  Concepto clave:
 * En Shopify, cada tienda puede tener mÃºltiples temas. Uno se usa para desarrollo (`theme dev`), mientras otros pueden estar publicados o almacenados como borradores.

 * En este mÃ³dulo vas a replicar ese flujo, organizando temas por nombre y permitiendo:
 *   - Crear nuevos temas
 *   - Subir temas al servidor
 *   - Descargar temas del servidor
 *   - Tener una versiÃ³n activa en desarrollo

 * ðŸŽ¯ Objetivo:
 * Agregar 3 comandos a `Mockify` CLI:
 *   - `Mockify theme init`
 *   - `Mockify theme push`
 *   - `Mockify theme pull`

 * âœ… Estructura global:
 * ```
 * Ejercicios_etapa_2/
 * â”œâ”€â”€ Mapper.ts
 * â”œâ”€â”€ Mockify.ts
 * â”œâ”€â”€ server/
 * â”‚   â””â”€â”€ mystore.mymockify.com/
 * â”‚       â”œâ”€â”€ themes/
 * â”‚       â”‚   â”œâ”€â”€ dev/
 * â”‚       â”‚   â”œâ”€â”€ tema-uno/
 * â”‚       â”‚   â””â”€â”€ tema-dos/
 * â”‚       â””â”€â”€ dist/
 * â”œâ”€â”€ tema-uno/
 * â”œâ”€â”€ tema-dos/
 * ```

 * âœ… Instrucciones:

 * 1. **Comando: `Mockify theme init`**
 *    - Solicita al usuario el nombre del nuevo tema (por ejemplo: `tema-uno`)
 *    - Crea una carpeta `tema-uno/` en el directorio actual
 *    - Genera dentro la estructura mÃ­nima de un tema:
 *      - `assets/`, `config/`, `snippets/`, `sections/`, `templates/`, `layouts/`, `dist/`
 *    - Puedes incluir archivos iniciales vacÃ­os si lo deseas

 * 2. **Comando: `Mockify theme push`**
 *    - Se ejecuta dentro de una carpeta de tema vÃ¡lida
 *    - Verifica que el tema cumpla con la estructura esperada
 *    - Usa `.storesettings.json` para saber a quÃ© tienda subir el tema
 *    - Copia todos los archivos a: `server/<store>/themes/<nombre-tema>/`
 *    - Si ya existe, pide confirmaciÃ³n para sobrescribir

 * 3. **Comando: `Mockify theme pull`**
 *    - Muestra una lista de temas disponibles en el servidor para esa tienda
 *    - Permite al usuario elegir uno y lo descarga a una nueva carpeta local con el mismo nombre
 *    - Reemplaza si ya existe localmente (con confirmaciÃ³n)

 * 4. **Comando: `Mockify theme dev`**
 *    - Siempre sincroniza el tema actual (carpeta donde se ejecuta) con `server/<store>/themes/dev/`
 *    - Reemplaza el contenido de `dev/` completamente
 *    - Este tema es el que se renderiza en tiempo real con WebSocket + servidor local

 * âœ… Validaciones requeridas:
 * - Mockify debe asegurarse de que:
 *   - El tema tiene la estructura vÃ¡lida
 *   - Existe `.storesettings.json` con la tienda activa
 *   - Los nombres de carpeta sean Ãºnicos para los temas por tienda

 * âœ… Consejo:
 * AsÃ­ como en Shopify usamos:
 *   - `shopify theme init` â†’ crear nuevo tema
 *   - `shopify theme push` â†’ subir al servidor
 *   - `shopify theme pull` â†’ traer desde el servidor
 *   - `shopify theme dev` â†’ entorno en vivo
 *
 * TÃº ahora tienes un flujo equivalente con Mockify.

 */
