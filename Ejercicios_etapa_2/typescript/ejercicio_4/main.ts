/**
 * M√ìDULO 4: CONSTRUCCI√ìN DEL √ÅRBOL DOM A PARTIR DE TOKENS
 *
 * üß† Concepto clave:
 * Un documento HTML es naturalmente una estructura en forma de √°rbol.
 * Cada etiqueta de apertura crea un nuevo "nodo padre", cada etiqueta de cierre cierra el nodo actual,
 * y los textos son hijos normales dentro de las etiquetas.
 *
 * En este m√≥dulo vas a construir:
 * - Un √°rbol jer√°rquico que representa tu HTML
 * - Usando **un stack** para saber en qu√© nivel del √°rbol est√°s
 * - Usando **tipos expl√≠citos** en TypeScript para representar nodos
 *
 * üéØ Objetivo:
 * 1. Crear una funci√≥n `construirArbol(tokens: Token[]): Nodo`
 * 2. Construir recursivamente un √°rbol de nodos a partir de los tokens
 *
 * ‚úÖ Entrada esperada:
 * Un arreglo de objetos tipo `Token`:
 * ```ts
 * type Token = {
 *   tipo: 'apertura' | 'cierre' | 'autocierre' | 'texto';
 *   nombre: string | null;
 *   contenido: string | null;
 *   atributos?: Record<string, string>;
 * }
 * ```
 *
 * ‚úÖ Ejemplo de tokens:
 * ```ts
 * [
 *   { tipo: 'apertura', nombre: 'div', contenido: null, atributos: {} },
 *   { tipo: 'texto', nombre: null, contenido: 'Hola' },
 *   { tipo: 'apertura', nombre: 'span', contenido: null, atributos: {} },
 *   { tipo: 'texto', nombre: null, contenido: 'mundo' },
 *   { tipo: 'cierre', nombre: 'span', contenido: null },
 *   { tipo: 'cierre', nombre: 'div', contenido: null }
 * ]
 * ```
 *
 * ‚úÖ ¬øQu√© tipos usar para el √°rbol de nodos?
 * Recomendamos usar **dos tipos separados** para que sea m√°s claro:
 *
 * ```ts
 * type NodoElemento = {
 *   tipo: 'elemento';
 *   nombre: string;
 *   atributos: Record<string, string>;
 *   hijos: Nodo[];
 * };

 * type NodoTexto = {
 *   tipo: 'texto';
 *   contenido: string;
 * };

 * type Nodo = NodoElemento | NodoTexto;
 * ```
 *
 * - Un `NodoElemento` tiene nombre, atributos, y un arreglo de `hijos`
 * - Un `NodoTexto` tiene solo el contenido de texto
 * - El tipo general `Nodo` es la uni√≥n (`|`) de ambos
 *
 * ‚úÖ Salida esperada:
 * Un objeto tipo `Nodo` que representa el √°rbol DOM:
 * ```ts
 * {
 *   tipo: 'elemento',
 *   nombre: 'div',
 *   atributos: {},
 *   hijos: [
 *     { tipo: 'texto', contenido: 'Hola' },
 *     {
 *       tipo: 'elemento',
 *       nombre: 'span',
 *       atributos: {},
 *       hijos: [
 *         { tipo: 'texto', contenido: 'mundo' }
 *       ]
 *     }
 *   ]
 * }
 * ```
 *
 * ‚úÖ Instrucciones:
 * 1. Crea una funci√≥n `construirArbol(tokens: Token[]): Nodo`
 * 2. Usa una pila (stack) para construir la jerarqu√≠a:
 *    - Cuando encuentres una etiqueta de apertura:
 *      - Crea un nuevo `NodoElemento`
 *      - Agr√©galo como hijo del nodo actual
 *      - Haz `push` del nuevo nodo como el nodo actual
 *    - Cuando encuentres una etiqueta de cierre:
 *      - Haz `pop` del stack para volver al padre
 *    - Cuando encuentres un texto:
 *      - Crea un `NodoTexto`
 *      - Agr√©galo como hijo del nodo actual
 *    - Cuando encuentres una etiqueta de autocierre:
 *      - Crea un `NodoElemento` sin hijos
 *      - Agr√©galo directamente como hijo del nodo actual
 *
 * ‚úÖ Reglas clave:
 * - El primer `NodoElemento` que se abre ser√° el **nodo ra√≠z** de tu √°rbol
 * - Cada nodo puede tener m√∫ltiples `hijos`
 * - Un `NodoTexto` nunca tiene `hijos`
 *
 * Conceptos clave que vas a practicar:
 * - Estructuras de √°rbol
 * - Uso de `stack` para seguir jerarqu√≠a
 * - Modelado de tipos con TypeScript
 * - Pensar en estructuras de datos din√°micas
 *
 * Consejo:
 * - Si ves que todo se complica, **haz primero un pseudoc√≥digo**:  
 *   "Si apertura -> crear hijo y mover contexto... Si cierre -> regresar al padre..."
 * - As√≠ entender√°s c√≥mo un navegador construye el DOM real.
 */
