/**
 * M√ìDULO 16: SIMULACI√ìN DE ENLACE UNIDIRECCIONAL (ONE-WAY DATA BINDING) EN TERMINAL
 *
 * üß† Concepto clave:
 * En frameworks modernos como Vue, React o Angular, los datos cambian y la vista se actualiza autom√°ticamente.
 * A esto se le llama "enlace unidireccional" (one-way data binding).
 *
 * En este m√≥dulo vas a simular ese comportamiento desde la terminal. Tu programa:
 * - Detectar√° cambios en un archivo de datos
 * - Volver√° a procesar la plantilla `.liquid`
 * - Mostrar√° el nuevo HTML renderizado directamente en la consola
 *
 * Este es el primer paso hacia un flujo de desarrollo autom√°tico (como un ‚Äúlive preview‚Äù b√°sico).
 *
 * üéØ Objetivo:
 * Crear un peque√±o sistema que reacciona a cambios en archivos `.ts` o `.json` y actualiza el HTML renderizado en la terminal.
 *
 * ‚úÖ Estructura esperada:
 * ```
 * Ejercicios_etapa_2/
 * ‚îú‚îÄ‚îÄ plantilla_motor/
 * ‚îÇ   ‚îî‚îÄ‚îÄ mod.ts                   ‚Üê Tu motor unificado
 * ‚îú‚îÄ‚îÄ ejercicio_16/
 * ‚îÇ   ‚îú‚îÄ‚îÄ main.ts                  ‚Üê Script principal con el watcher
 * ‚îÇ   ‚îú‚îÄ‚îÄ data.ts                  ‚Üê Archivo editable que exporta el objeto `contexto`
 * ‚îÇ   ‚îî‚îÄ‚îÄ template.liquid          ‚Üê Tu plantilla HTML en formato liquid
 * ```
 * Esta estructura puede cambiar dependiendo si est√°s usando un archivo central o una carpeta central, pero en caso de ser una carpeta
 * la √∫nica diferencia radica en que tienes tres archivos en lugar de uno dentro de plantilla_motor.
 *
 * ‚úÖ Instrucciones:
 * 1. Crea un archivo `data.ts` con una exportaci√≥n:
 *    ```ts
 *    export const contexto = { nombre: "Ana", edad: 30 };
 *    ```
 *
 * 2. En `main.ts`:
 *    - Usa `Deno.watchFs()` para observar cambios en `data.ts`
 *    - Usa `import("file://" + path + "?version=" + Date.now())` para forzar la recarga del m√≥dulo cuando cambia
 *    - Vuelve a cargar `template.liquid` con `Deno.readTextFile()`
 *    - Usa `renderizarArchivoLiquid` desde tu `mod.ts` (o desde el archivo correspondiente si tienes una carpeta central)
 *      para procesar la plantilla con los datos
 *    - Imprime el HTML resultante en consola. Opcional: usa `console.clear()` entre renders
 *
 * 3. Usa tu pipeline completo:
 *    - Reemplazo de variables
 *    - Condicionales
 *    - Bucles
 *    - Filtros
 *    - Asignaciones
 *    - Renderizado HTML (con escape de texto)
 *
 * ‚úÖ Resultado esperado:
 * Cada vez que guardes `data.ts`, tu terminal se actualiza mostrando el nuevo resultado HTML renderizado.
 *
 * Ejemplo:
 * // template.liquid
 * "<h1>{{ nombre }}</h1><p>Tienes {{ edad }} a√±os.</p>"
 *
 * // data.ts
 * export const contexto = { nombre: "Ana", edad: 30 };
 *
 * // salida en terminal:
 * <h1>Ana</h1>
 * <p>Tienes 30 a√±os.</p>
 *
 * // Cambias edad a 31 en data.ts ‚Üí la terminal se actualiza autom√°ticamente:
 * <h1>Ana</h1>
 * <p>Tienes 31 a√±os.</p>
 *
 * ‚úÖ Consejo:
 * - Usa `console.log()` al inicio del render para indicar que se recompil√≥
 * - Si usas `.json` en vez de `.ts`, puedes leerlo directamente con `Deno.readTextFile()` y `JSON.parse()`
 * - Este m√≥dulo demuestra c√≥mo un flujo *reactivo* puede lograrse sin un navegador ni framework
 */

//CORRER CON EN COMANDO     deno run --allow-read --allow-run main.ts
//imports
import { liquidEngine } from "../plantilla_motor/motorDePlantillas.ts";
import { htmlParser } from "../plantilla_motor/parserDehtml.ts";
import { renderDOM } from "../plantilla_motor/renderizador.ts";


const plantillaPath = "./template.liquid";
const dataPath = "./data.ts";

// üïµÔ∏è‚Äç‚ôÄÔ∏è **Observar cambios en `data.ts`**
async function observarCambios() {
  for await (const evento of Deno.watchFs("./")) {
    if (evento.paths.some(path => path.endsWith("data.ts"))) {
      console.log("\nüîÑ Cambio detectado en `data.ts`, recargando contexto...");
      await recargarYProcesar();
    }
  }
}

// üîÑ **Recargar `data.ts` y procesar la plantilla**
async function recargarYProcesar() {
  try {
    console.clear(); // Opcional, limpia la consola entre renders

    // 1Ô∏è‚É£ Recargar `data.ts` con una nueva versi√≥n en cada cambio
    const contextoImportado = await import(`file://${Deno.cwd()}/data.ts?version=${Date.now()}`);
    const contexto = contextoImportado.contexto; // Ahora s√≠ acceder√° correctamente
    console.log(contextoImportado)
    console.log(contexto)
    // 2Ô∏è‚É£ Leer `template.liquid`
    const entradaLiquid = await Deno.readTextFile(plantillaPath);

    // 3Ô∏è‚É£ Procesar la plantilla con los datos actualizados
    const plantillaRenderizada = liquidEngine(entradaLiquid, contexto);
    const arbolDOM = htmlParser(plantillaRenderizada);
    const htmlFinal = renderDOM(arbolDOM);

    // 4Ô∏è‚É£ Mostrar el HTML actualizado en consola
    console.log("\n HTML generado:\n", htmlFinal);
  } catch (error) {
    console.error("\n Error al recargar:", error);
  }
}

//Ejecutamos el watcher
await recargarYProcesar(); // Render inicial
observarCambios(); // Monitorea cambios en `data.ts`
