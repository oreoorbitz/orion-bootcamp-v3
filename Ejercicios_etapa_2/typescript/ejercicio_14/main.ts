/**
 * M√ìDULO 14: CONVERTIR UN ARCHIVO `.liquid` EN HTML COMPLETO
 *
 * üß† Concepto clave:
 * En el m√≥dulo anterior combinaste dos piezas esenciales:
 * - Un motor Liquid que interpreta variables, condicionales, bucles, filtros y asignaciones.
 * - Un parser DOM que transforma HTML plano en un √°rbol de nodos manipulables.
 *
 * Ahora, vas a dar el siguiente paso: tomar una plantilla real almacenada en un archivo `.liquid`, procesarla con tu motor, y renderizarla como HTML final.
 * Este paso es lo que convierte tu sistema en una **herramienta de compilaci√≥n completa**, similar a los generadores de sitios est√°ticos como Jekyll o Eleventy.
 *
 * ‚úÖ Este m√≥dulo conecta:
 * - üìÑ Tu motor Liquid (plantilla + contexto)
 * - üå≥ Tu parser DOM (construcci√≥n de √°rbol)
 * - üßæ Tu renderer final (HTML como string)
 *
 * ‚úÖ Flujo completo:
 * 1. Leer la plantilla `.liquid` desde disco
 * 2. Ejecutar el motor Liquid con el contexto
 * 3. Pasar el resultado como string HTML a tu parser
 * 4. Construir el √°rbol de nodos
 * 5. Renderizar el √°rbol como HTML plano
 *
 * üéØ Objetivo:
 * Implementar una funci√≥n `renderizarArchivoLiquid(ruta: string, contexto: Record<string, any>): Promise<string>` que:
 * - Use `Deno.readTextFile` para obtener el contenido
 * - Procese todas las directivas y expresiones de plantilla
 * - Pase el resultado al parser HTML (`construirArbol`)
 * - Devuelva un string HTML final listo para mostrar o guardar
 *
 * ‚úÖ Ejemplo de plantilla `./plantillas/bienvenida.liquid`:
 * ```liquid
 * <section>
 *   <h1>{{ titulo | upcase }}</h1>
 *   <ul>
 *     {% for fruta in frutas %}
 *       {% if fruta %}
 *         <li>{{ fruta | upcase }}</li>
 *       {% endif %}
 *     {% endfor %}
 *   </ul>
 * </section>
 * ```
 *
 * ‚úÖ Contexto de ejemplo:
 * ```ts
 * const contexto = {
 *   titulo: "Frutas favoritas",
 *   frutas: ["manzana", "uva", "naranja"]
 * };
 * ```
 *
 * ‚úÖ Resultado esperado:
 * ```html
 * <section>
 *   <h1>FRUTAS FAVORITAS</h1>
 *   <ul><li>MANZANA</li><li>UVA</li><li>NARANJA</li></ul>
 * </section>
 * ```
 *
 * üõ†Ô∏è Instrucciones:
 * 1. Crea una carpeta `/plantillas` con un archivo `.liquid`
 * 2. Implementa la funci√≥n `renderizarArchivoLiquid(ruta, contexto)`
 * 3. Usa las funciones de m√≥dulos anteriores en este orden:
 *    - `detectarTokensPlantilla()`
 *    - `procesarAsignaciones()`
 *    - `procesarCondicionales()`
 *    - `procesarBucles()`
 *    - `renderizarVariables()` con soporte de filtros
 *    - `tokenizarHTML()` ‚Üí `clasificarTokens()` ‚Üí `construirArbol()`
 *    - `renderizarHTML()`
 * 4. Devuelve el string HTML renderizado
 *
 * ‚úÖ Uso propuesto:
 * ```ts
 * const html = await renderizarArchivoLiquid("./plantillas/bienvenida.liquid", contexto)
 * console.log(html)
 * ```
 *
 * üß† Consejo:
 * - Este m√≥dulo no agrega nueva l√≥gica de plantillas, pero **une todos los m√≥dulos anteriores en un flujo completo**
 * - Esta funci√≥n se convertir√° en el punto de entrada principal de tu sistema
 * - Verifica cada paso con `console.log()` si algo no se transforma como esperas
 */


// Aseg√∫rate de iniciar Deno con permisos para leer archivos (por ejemplo, --allow-read)

// main.ts

// Importa las funciones del motor Liquid y del parser HTML
import { liquidEngine } from "./liquidEngine.ts";
import { htmlParser, renderDOM } from "./htmlParser.ts";

async function main() {
  // Define el contexto que necesites para tu plantilla Liquid
  const contexto = {
    frutas: ["manzana", "pl√°tano", "uva"],
    // Otras variables que utilices en la plantilla
  };

  try {
    // Ajusta la ruta al archivo, ya que se encuentra en la carpeta "plantillas"
    const rutaCompleta = "./plantillas/bienvenida.liquid";
    // Lee la plantilla desde disco
    const contenidoLiquid: string = await Deno.readTextFile(rutaCompleta);
    console.log("Contenido de bienvenida.liquid antes de procesar LiquidEngine:\n", contenidoLiquid);

    // Procesa la plantilla con tu motor Liquid
    const htmlRenderizado: string = liquidEngine(contenidoLiquid, contexto);


    // Parsea el HTML renderizado para construir el √°rbol DOM
    const arbolDOM = htmlParser(htmlRenderizado);

    // Renderiza el √°rbol DOM a una cadena HTML final
    const htmlFinal: string = renderDOM(arbolDOM);

    // Imprime el resultado final para verificar el flujo completo
    console.log("HTML Final Renderizado:\n", htmlFinal);
  } catch (error) {
    console.error("Error durante el procesamiento:", error);
  }
}

// Si este archivo es el m√≥dulo principal, se ejecuta la funci√≥n main
if (import.meta.main) {
  main();
}
