// üß™ MiniEjemplo 4: Corrigiendo predicciones incorrectas de c√≥digo JavaScript

// Tenemos un bloque de texto con predicciones de c√≥digo en Markdown.
// Algunas predicciones son incorrectas. Tu tarea es:
// 1. Encontrar los bloques de c√≥digo de una sola l√≠nea con ```js ...```
// 2. Identificar el resultado que el texto dice que produce ese c√≥digo
// 3. Evaluar el c√≥digo real usando `eval()`
// 4. Reemplazar la predicci√≥n con el resultado correcto

// ‚úÖ Qu√© es `eval()`:
// Eval toma un string como entrada y lo ejecuta como c√≥digo JavaScript.
// Ejemplo: eval("2 + 2") devuelve 4.

// ‚ùó No uses `eval()` con datos no confiables (como usuarios externos).
// En este caso es seguro porque t√∫ controlas el texto.

// üì¶ Texto de entrada:
const texto = `
Aqu√≠ hay dos fragmentos de c√≥digo evaluados:

\`\`\`js 2 > 4\`\`\` ‚Üí el resultado es: \`true\` ‚ùå (esto es falso)

\`\`\`js 1 + 1 === 2\`\`\` ‚Üí el resultado es: \`true\` ‚úÖ (esto es correcto)
`

// üéØ Objetivo final:
// Corregir la predicci√≥n en el primer caso. El resultado debe quedar as√≠:
// \`\`\`js 2 > 4\`\`\` ‚Üí el resultado es: \`false\`

// ‚úÖ Soluci√≥n sugerida:
const corregirTexto = (entrada: string): string => {
  // Buscar todos los bloques de c√≥digo como ```js ...```
  const regex = /```js (.*?)``` ‚Üí el resultado es: `(.+?)`/g
  let resultado = entrada

  for (const match of entrada.matchAll(regex)) {
    const codigo = match[1].trim()
    const valorActual = match[2].trim()

    // Evaluamos el c√≥digo real
    let valorEvaluado
    try {
      valorEvaluado = eval(codigo)
    } catch {
      valorEvaluado = '‚ö†Ô∏è error de evaluaci√≥n'
    }

    // Reemplazamos el valor incorrecto
    resultado = resultado.replace(
      `\`\`\`js ${codigo}\`\`\` ‚Üí el resultado es: \`${valorActual}\``,
      `\`\`\`js ${codigo}\`\`\` ‚Üí el resultado es: \`${valorEvaluado}\``
    )
  }

  return resultado
}

// üß™ Prueba
console.log(corregirTexto(texto))

// üìå Tu tarea:
// - Cambia el texto para agregar m√°s predicciones incorrectas
// - Aseg√∫rate de que `corregirTexto()` las corrija
// - No cambies el texto manualmente ‚Äî conf√≠a en tu c√≥digo
