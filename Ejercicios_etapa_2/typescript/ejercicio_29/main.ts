/**
 * M√ìDULO 29: RUTEO Y PLANTILLAS DIN√ÅMICAS PARA PRODUCTOS Y COLECCIONES
 *
 * üß† Concepto clave:
 * En un sitio web din√°mico (como una tienda), las rutas definen qu√© contenido mostrar.
 *
 * - `/products/gold-necklace` debe mostrar un producto espec√≠fico
 * - `/collections/sale` debe mostrar una colecci√≥n y sus productos relacionados
 *
 * En este m√≥dulo, vas a:
 * - Generar una p√°gina HTML por cada producto y colecci√≥n
 * - Renderizar esas p√°ginas con tus plantillas Liquid
 * - Servirlas desde tu servidor actual
 * - Mantener funcionando el hot reload
 *
 * üéØ Objetivo:
 * - Implementar ruteo basado en archivos HTML precompilados
 * - Generar una p√°gina por ruta (`/products/:handle`, `/collections/:handle`)
 * - Usar las plantillas `product.liquid` y `collection.liquid` con datos desde SQLite
 *
 * ‚úÖ Instrucciones:
 *
 * 1. Crea una carpeta de plantillas si a√∫n no la tienes:
 *
 * ```
 * templates/
 * ‚îú‚îÄ‚îÄ product.liquid
 * ‚îî‚îÄ‚îÄ collection.liquid
 * ```
 *
 * 2. Actualiza tu proceso de build para que:
 *    - Compile un HTML por producto y por colecci√≥n
 *    - Guarde cada archivo en `dist/products/:handle.html` o `dist/collections/:handle.html`
 *    - Siga inyectando el script de hot reload al final del `<body>`
 *
 * üìù Ejemplo de c√≥mo podr√≠as usar `contextPlease.ts` para preparar los datos para cada p√°gina:
 * (esto es solo una referencia de uso, no lo copies literalmente)
 *
 * ```ts
 * const productos = await getAllProductsFromDB();
 * for (const producto of productos) {
 *   const contexto = { product: producto };
 *   const html = renderizarHTML(template, contexto); // o como sea que implementaste el render
 *   const finalHtml = await injector(html, "server/hotreload.ts");
 *   await saveHtml(`dist/products/${producto.handle}.html`, finalHtml);
 * }
 * ```
 *
 * 3. Actualiza tu servidor para:
 *    - Servir archivos desde `dist/` seg√∫n la URL solicitada
 *    - Por ejemplo, `/products/gold-necklace` ‚Üí `dist/products/gold-necklace.html`
 *    - `/collections/sale` ‚Üí `dist/collections/sale.html`
 *
 * 4. Aseg√∫rate de que el hot reload siga funcionando.
 *    - El script inyectado en cada HTML debe seguir conect√°ndose al WebSocket
 *    - Cuando modifiques una plantilla, los archivos afectados deben ser regenerados
 *
 * ‚úÖ Ejemplo de contenido esperado en una plantilla de colecci√≥n (`collection.liquid`)
 * (esta plantilla debe estar en `templates/collection.liquid`)
 *
 * ```liquid
 * <h1>{{ collection.title }}</h1>
 * <ul>
 *   {% for producto in collection.products %}
 *     <li>
 *       <a href="/products/{{ producto.handle }}">
 *         {{ producto.title }}
 *       </a>
 *     </li>
 *   {% endfor %}
 * </ul>
 * ```
 *
 * ‚úÖ Ejemplo de contenido esperado en una plantilla de producto (`product.liquid`)
 *
 * ```liquid
 * <h1>{{ product.title }}</h1>
 * <p>{{ product.description }}</p>
 * ```
 *
 * ‚úÖ Ejemplo de c√≥mo una plantilla puede vincular a una colecci√≥n
 * (por ejemplo, en `index.liquid` o cualquier otra):
 *
 * ```liquid
 * <a href="/collections/sale">Ver ofertas</a>
 * ```
 *
 * üß† Consejo:
 * - No est√°s creando un servidor din√°mico: est√°s generando p√°ginas HTML individuales que el servidor sirve como archivos
 * - El ruteo se basa en el nombre del archivo `.html` dentro de `dist/`
 *
 * ‚úÖ Verifica:
 * - Que se genera un archivo `.html` por cada producto y colecci√≥n
 * - Que esos archivos contienen el contenido correcto y el script de hot reload
 * - Que el servidor puede servirlos correctamente cuando se accede por URL
 * - Que los enlaces en la p√°gina funcionan y llevan al archivo HTML correcto
 */
